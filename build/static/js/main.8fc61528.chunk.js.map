{"version":3,"sources":["fire.js","comps/login.js","comps/hero.js","App.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","props","email","setEmail","password","setPassword","handleLogin","handleSignup","hasAccount","setHasAccount","emailError","passwordError","className","type","autoFocus","required","value","onChange","e","target","onClick","Hero","handleLogout","App","useState","user","setUser","setEmailError","setPasswordError","clearErrors","authListener","auth","onAuthStateChanged","useEffect","Fragment","id","signOut","signInWithEmailAndPassword","catch","err","code","message","createUserWithEmailAndPassword","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fc61528.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyArcIrTNOoTFDEy3a9KXGpOyMKgtBP6bTU\",\n  authDomain: \"loginone-dd3ab.firebaseapp.com\",\n  databaseURL: \"https://loginone-dd3ab.firebaseio.com\",\n  projectId: \"loginone-dd3ab\",\n  storageBucket: \"loginone-dd3ab.appspot.com\",\n  messagingSenderId: \"538025086051\",\n  appId: \"1:538025086051:web:88a9cdb69502885efcfc56\",\n};\n// Initialize Firebase\nconst fire = firebase.initializeApp(firebaseConfig);\n\nexport default fire;\n","import React from \"react\";\n\nconst Login = (props) => {\n  /*\n    Before start filling the login.js, you have to pass the PROPS from the parent\n    which is App, check the step 1 in that file and add them accordingly like so:\n\n    <React.Fragment>\n      <div id=\"page\">\n        <Login\n          email={email}\n          setEmail={setEmail}\n          password={password}\n          setPassword={setPassword}\n          handleLogin={handleLogin}\n          handleSignup={handleSignup}\n          hasAccount={hasAccount}\n          setHasAccount={setHasAccount}\n          emailError={emailError}\n          passwordError={passwordError}\n          // All of the 10 props that you are passing here are connected to step 1 of this FILE\n          // THIS PROPS will be passed and used in login.js.\n        />\n      </div>\n    </React.Fragment>\n\n    \n    \n    */\n  const {\n    email,\n    setEmail,\n    password,\n    setPassword,\n    handleLogin,\n    handleSignup,\n    hasAccount,\n    setHasAccount,\n    emailError,\n    passwordError,\n  } = props;\n\n  return (\n    <section className=\"login\">\n      <div className=\"logInContainer\">\n        <label>Username</label>\n        {/* --- */}\n        <input\n          type=\"text\"\n          autoFocus\n          required\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        {/* ERRORS */}\n        <p className=\"errorMsg\">{emailError}</p>\n        <label>Password</label>\n        <input\n          type=\"password\"\n          required\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        {/* ERRORS */}\n        <p className=\"errorMsg\">{passwordError}</p>\n      </div>\n      {/*\n       */}\n      <div className=\"btnContainer\">\n        {/* STATES hasAccount\n         */}\n\n        {hasAccount ? (\n          <>\n            <button className=\"btn1\" onClick={handleLogin}>\n              Sign In\n            </button>\n            <p className=\"par1\">\n              Don't have an account ?\n              <span onClick={() => setHasAccount(!hasAccount)}>Sign up</span>\n            </p>\n          </>\n        ) : (\n          <>\n            <button className=\"btn2\" onClick={handleSignup}>\n              {\" \"}\n              Sign Up\n            </button>\n            <p className=\"par2\">\n              Have an account\n              <span onClick={() => setHasAccount(!hasAccount)}>Sign In</span>\n              {/* If you notice, when you click SIGN In, it will send you to SIGN UP and viceversa but\n                it will also change the button. */}\n            </p>\n          </>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\n\nconst Hero = ({ handleLogout }) => {\n  // the hero props destructured\n  return (\n    <section className=\"hero\">\n      <nav>\n        <h1>hello hero</h1>\n        <button onClick={handleLogout}>LogOut</button>\n      </nav>\n    </section>\n  );\n};\n\nexport default Hero;\n","import React, { useState, useEffect } from \"react\";\nimport fire from \"./fire\";\nimport Login from \"./comps/login\";\nimport Hero from \"./comps/hero\";\n/*\n\n                                                             **   1  **\n                                      the STATES connected to the functions in step 2\n\n*/\nconst App = () => {\n  const [user, setUser] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  //\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [hasAccount, setHasAccount] = useState(false);\n\n  /*\n\n                                                          **   7  **\n                                      The following functions will serve to clean the ERRORS\n\n*/\n  const clearInputs = () => {\n    // You will use the clearInputs()  function , everytime you have a user ,line:138:\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n  //\n  const clearErrors = () => {\n    setEmailError(\"\");\n    setPasswordError(\"\");\n  };\n  /*                          AFTER SETTING UP the cleaning error, you will have to add them inside\n                               the functions connected to the states  in step 2 and 3\n\n\n\n\n\n\n                                                         **   2  **\n                                       the functions connected to the STATES in step 1\n                                       \n                                                      //---------------------\n                                                      //  LOG IN\n                                                      //---------------------\n                                                      //\n  */\n\n  const handleLogin = () => {\n    clearErrors();\n    fire // here you will start using fire library that you have imported from the fire.js\n      .auth() //auth stands for Authentification\n      .signInWithEmailAndPassword(email, password)\n      // here we will handle the errors for when the user type or dont type the required data.\n      .catch((err) => {\n        switch (err.code) {\n          case \"auth/invalid-email\":\n          case \"auth/user-disabled\":\n          case \"auth/user-not-found\":\n            setEmailError(err.message);\n            break;\n          case \"auth/wrong-password\":\n            setPasswordError(err.message);\n            break;\n        }\n      });\n  };\n\n  /*\n\n\n                                                          **   3  **\n                                                      \n                                                    //---------------------\n                                                    //  SIGN UP\n                                                    //---------------------\n                                                    //\n                                                        \n*/\n\n  const handleSignup = () => {\n    clearErrors();\n    fire // here you will start using fire library that you have imported from the fire.js\n      .auth() //auth stands for Authentification\n      .createUserWithEmailAndPassword(email, password)\n      // here we will handle the errors for when the user type or dont type the required data.\n      .catch((err) => {\n        switch (err.code) {\n          case \"auth/email-already-in-use\":\n          case \"auth/invalid-email\":\n            setEmailError(err.message);\n            break;\n          case \"auth/weak-password\":\n            setPasswordError(err.message);\n            break;\n        }\n      });\n  };\n  /*\n\n\n                                                          **   4  **\n   \n                                                        \n                                                    //---------------------\n                                                    //  LOG OUT\n                                                    //---------------------\n                                                    //                                               \n\n*/\n\n  const handleLogout = () => {\n    fire.auth().signOut();\n  };\n  /*\n  \n\n                                                          **   5  **\n \n    \n                                                    //\n                                                    //---------------------\n                                                    //  LISTENER to see if user exists\n                                                    //---------------------\n                                                    //                                                      \n\n                                          // after the function log out, we are going to NEED  \n                                          listener to see if USER exist\n*/\n\n  const authListener = () => {\n    fire.auth().onAuthStateChanged((user) => {\n      if (user) {\n        clearInputs();\n        // if there is a User you want to SETUSER to that user(line:11)\n        setUser(user);\n      } else {\n        // here you want also to SETUSER but you will give an empty string if there s not USER, like so  setUser(\"\");\n        setUser(\"\");\n      }\n    });\n  };\n  /*\n\n                                                          **   6  **\n                                  If you remember, you also requiŕed the use EFFECT in line (1)\n\n\n                                                  \n                                                      //---------------------\n                                                      //  USE EFFECT\n                                                      //---------------------\n    \n    \n    \n    \n    \n                                                   \n*/\n\n  useEffect(() => {\n    authListener();\n  }, []);\n\n  //                                --------------------------------------------------------------\n  //\n  //                                --------------------------------------------------------------\n  //\n\n  return (\n    <React.Fragment>\n      <div id=\"AppPage\">\n        {/* \n  \n  the FOLLOWING below means: that it will check if the user has an account ? , if its true, it will send\n          the USER to the hero.js  page , if it s false/ user has no account , it will send him to the Login page\n  \n  */}\n\n        {user ? (\n          <Hero handleLogout={handleLogout} />\n        ) : (\n          <Login\n            email={email}\n            setEmail={setEmail}\n            password={password}\n            setPassword={setPassword}\n            handleLogin={handleLogin}\n            handleSignup={handleSignup}\n            hasAccount={hasAccount}\n            setHasAccount={setHasAccount}\n            emailError={emailError}\n            passwordError={passwordError}\n            // All of the 10 props that you are passing here are connected to step 1 of this FILE\n            // THIS PROPS will be passed and used in login.js.\n          />\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n\n/*\n\n\n\n\n  //                                --------------------------------------------------------------\n  //                          BEFORE THE CHANGES\n  //                                --------------------------------------------------------------\n  //\n  return (\n    <React.Fragment>\n      <div id=\"page\">\n        <Login\n          email={email}\n          setEmail={setEmail}\n          password={password}\n          setPassword={setPassword}\n          handleLogin={handleLogin}\n          handleSignup={handleSignup}\n          hasAccount={hasAccount}\n          setHasAccount={setHasAccount}\n          emailError={emailError}\n          passwordError={passwordError}\n          // All of the 10 props that you are passing here are connected to step 1 of this FILE\n          // THIS PROPS will be passed and used in login.js.\n        />\n        <Hero handleLogout={handleLogout}/>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n\n\n\n\n\n*/\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./scss/main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}